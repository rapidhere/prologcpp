#parse('cpp-template/M.vm')##
#set($fSize = $functor.size - 1)##
#set($fList = [0..$fSize])##

template <#tHeader($fList, 'class T%d', $String.format("int _i=%d", $functor.getItemCount()))>
struct #topFunctorId($functor) {
#foreach($i in $fList)
    template<int which>
    #ol()
    using v = typename mergePack<
        typename #subFunctorId($functor)<#tHeader($fList, 'T%d', '_i, which')>::v,
        typename #topFunctorId($functor)<#tHeader($fList, 'T%d', '_i-1')>::v<which>
    >::ret;
    #end
#end

};

template <#tHeader($fList, 'class T%d')>
struct #topFunctorId($functor) <#tHeader($fList, 'T%d', '0')> {
    template<int which>
    #ol()
    using v = typename at<which
        #foreach($i in $fList)
            , pack<>
        #end
    >::t;
    #end

};
